main = 'Consumo médio por município',
col = "#FFCCCC",
ylim = c(0, 0.0045))
lines(density(dados$cons), col = "#990000", lwd = 4)
hist(dados$taxa, probability = TRUE,
xlab = 'Preço', ylab = 'Densidade',
main = 'Preço do combustível',
col = "#99FF99", ylim = c(0, 0.5))
lines(density(dados$taxa), col = "#006600", lwd = 4)
hist(dados$licen, probability = TRUE,
xlab = 'Proporção', ylab = 'Densidade',
main = 'Prop. de licenciados',
col = "#CCFFFF", ylim = c(0, 8))
lines(density(dados$licen), col = "#000099", lwd = 4)
hist(dados$renda, probability = TRUE,
xlab = 'Renda', ylab = 'Densidade',
main = 'Renda percapita', col = "#FFCCFF")
lines(density(dados$renda), col = "#663366", lwd = 4)
hist(dados$estr, probability = TRUE,
xlab = 'Auxílio', ylab = 'Densidade',
main = 'Auxílio federal', col = "#E6E8FA", xlim = c(0, +15000))
lines(density(dados$estr), col = "#545454", lwd = 4)
plot(cons~taxa, data = dados,
xlab = 'Preço',
ylab = 'Consumo',
main = 'Consumo x preço')
abline(lm(cons~taxa, data = dados), col=2, lwd = 2)
plot(cons~licen, data = dados,
xlab = 'Proporção',
ylab = 'Consumo',
main = 'Consumo x prop. de licenciados')
abline(lm(cons~licen, data = dados),
col = 2, lwd = 2)
plot(cons~renda, data = dados,
xlab = 'Renda',
ylab = 'Consumo',
main = 'Consumo x renda percapita')
abline(lm(cons~renda, data = dados),
col = 2, lwd = 2)
plot(cons~estr, data = dados,
xlab = 'Auxílio',
ylab = 'Consumo',
main = 'Consumo x auxílio federal')
abline(lm(cons~estr, data = dados),
col = 2, lwd = 2)
## Correlograma
cor <- cor(dados[ ,-1])
cor
library(corrplot)
corrplot(cor,
method = "ellipse",
type="upper",
order="hclust",
tl.col="black",
tl.srt=45)
ajuste1 <-
lm(cons ~ taxa + licen + renda + estr,
data = dados)
## Análise de resíduos
par(mfrow=c(2,2))
plot(ajuste1, which = 1:4)
## Normalidade dos resíduos
shapiro.test(ajuste1$residuals)
par(mfrow=c(1,1))
hist(ajuste1$residuals, probability = TRUE,
main = 'Resíduos do Ajuste',
xlab = 'Resíduos', ylab = 'Frequência',
col = "#FFFFCC") # histograma dos residuos
lines(density(ajuste1$residuals),
col = "#666600",
lwd = 4)
## Medidas de influência
inf <- influence.measures(ajuste1)
summary(inf)
ajuste2 <-
lm(cons ~ taxa+licen+renda+estr,
data = dados[-c(19, 44), ])
## Comparando estimativas
library(car)
compareCoefs(ajuste1, ajuste2)
## Análise de resíduos
par(mfrow=c(2,2))
plot(ajuste2, which = 1:4)
## Normalidade dos resíduos
shapiro.test(ajuste2$residuals)
hist(ajuste2$residuals, probability = TRUE,
main = 'Resíduos do Ajuste',
xlab = 'Resíduos', ylab = 'Frequência',
col = "#FFFFCC") # histograma dos residuos
lines(density(ajuste2$residuals),
col = "#666600", lwd = 4)
## Resumo do Modelo Ajustado
summary(ajuste2)
## Estimativas do ajuste
round(coefficients(ajuste2),2)
## Intervalo de confiança
round(confint(ajuste2), 2)
### Perfis
perfis <-
data.frame(taxa = c(7, 8),
licen = c(0.5, 0.6),
renda = c(4000, 5000),
estr = c(3000, 5000))
### Predição de forma pontual
predict(ajuste2, newdata = perfis)
### Intervalos de confiança (95%)
### para o consumo médio médio.
predict(ajuste2, interval = 'confidence',
newdata = perfis)
### Intervalos de confiança (95%) para a predição.
predict(ajuste2, interval = 'prediction',
newdata = perfis)
# install.packages('ggplot2')
library(ggplot2)
?ggplot()
set.seed(1)
v1 = rnorm(1500, 20, 5)
v2 = rnorm(1500, 20, 5 )
x = v1*2
y = v1+v2
z = as.factor(rep(c('a','b'), 750))
df <- data.frame(x=x,y=y,z=z)
head(df)
par(mfrow = c(1,3))
hist(df$y,probability = T, main = 'Histograma',col=3)
box()
plot(y~z, df, col = 4, main='Boxplot')
plot(y~x,df, col=z, main='Gráfico de Dispersão')
abline(lm(y~x, df), lwd=3, col=4)
ggplot(data=df, mapping = aes(x=x))
### Histograma
ggplot(data=df, mapping = aes(x=x)) +
geom_histogram()
### Histograma
ggplot(data=df, mapping = aes(x=x)) +
geom_histogram()
ggplot(data=df, mapping = aes(x=x)) +
geom_histogram(col=1, fill='#00FFFF', alpha=0.3)
### Densidade
ggplot(data=df, mapping = aes(x=y))+
geom_density()
ggplot(data=df, mapping = aes(x=y)) +
geom_density(col=4,
fill='#088A85',
alpha=0.3)
### Boxplot
ggplot(data=df, mapping = aes(y=y)) +
geom_boxplot()
ggplot(data=df, mapping = aes(y=y)) +
geom_boxplot(col=4, fill=3, alpha=0.4)
ggplot(data=df, mapping = aes(y=y)) +
geom_boxplot(col=4, fill=3, alpha=0.4) +
coord_flip()
### Gráfico de barras
tabela <- as.data.frame(table(df$z))
ggplot(data=tabela, aes(x=Var1, y=Freq)) +
geom_bar(stat="identity")
ggplot(data=tabela, aes(x=Var1, y=Freq)) +
geom_bar(stat="identity",
fill=5,
col=4,
alpha=0.2,
lwd=1)
### Gráfico de setores
ggplot(tabela, aes(x="", y=Freq, fill=Var1))+
geom_bar(stat = "identity")+
coord_polar("y", start=0)
### Boxplot para níveis de um fator
ggplot(data=df, mapping = aes(x=z,y=y)) +
geom_boxplot()
### Gráficos de dispersão
ggplot(data=df, mapping = aes(x=x,y=y)) +
geom_point()
ggplot(data=df, mapping = aes(x=x,y=y,col=z)) +
geom_point(alpha=0.8) +
geom_smooth(method = 'lm', col=1)
## Adicionando eixos e títulos
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)+
ggtitle('Título')+
xlab('Eixo x')+
ylab('Eixo y')
## Facets
ggplot(data=df, mapping = aes(x=x,y=y)) +
geom_point(alpha=0.5)+
geom_smooth(se=F, lwd=1.5, col=2) +
facet_wrap(~z)
# install.packages("gridExtra")
library(gridExtra)
g1 <- ggplot(data=df, mapping = aes(x=y))+
geom_density(col=2, fill=2, alpha=0.3)
g2 <- ggplot(data=df, mapping = aes(x=y))+
geom_histogram(col=6, fill=6, alpha=0.3)
g3 <- ggplot(data=df, mapping = aes(x=x,y=y,col=z))+
geom_point(alpha=0.5)+
geom_smooth(col=1)
g4 <- ggplot(data=df, mapping = aes(x=z,y=y,col=z)) +
geom_boxplot(col=c(3,4),
fill=c(3,4),
alpha=0.3)
grid.arrange(g1,g2,g3,g4,nrow=2,ncol=2)
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)+
ggtitle('Título')+
xlab('Eixo x')+
ylab('Eixo y') +
theme_bw()
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)+
ggtitle('Título')+
xlab('Eixo x')+
ylab('Eixo y') +
theme_classic()
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)+
ggtitle('Título')+
xlab('Eixo x')+
ylab('Eixo y') +
theme_dark()
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)+
ggtitle('Título')+
xlab('Eixo x')+
ylab('Eixo y') +
theme_gray()
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)+
ggtitle('Título')+
xlab('Eixo x')+
ylab('Eixo y') +
theme_light()
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)+
ggtitle('Título')+
xlab('Eixo x')+
ylab('Eixo y') +
theme_minimal()
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)+
ggtitle('Título')+
xlab('Eixo x')+
ylab('Eixo y') +
theme_test()
ggplot(data=df, mapping = aes(x=x,y=y))+
geom_point(alpha=0.5)+
ggtitle('Título')+
xlab('Eixo x')+
ylab('Eixo y') +
theme_void()
grafico <- ggplot(data=df, mapping = aes(x=x,y=y,col=z)) +
geom_point(alpha=0.8) +
geom_smooth(method = 'lm', col=1)
grafico
#install.packages('plotly')
library(plotly)
ggplotly(grafico)
########################################################################
options(device = 'x11')
### Carregando as bibliotecas necess�rias.
require(rpart)
require(rpart.plot)
require(pROC)
require(party)
require(partykit)
require(fairml)
data("german.credit")
summary(german.credit)
head(german.credit, 10)
dim(german.credit)
### Defini��o de novos labels para as vari�veis para melhorar a visualiza��o dos resultados
german.credit$Savings_bonds <- factor(german.credit$Savings_bonds,
labels = c('A', 'D', 'B', 'C', 'E'))
german.credit$Credit_history <- factor(german.credit$Credit_history,
labels = c('A', 'B', 'C', 'D', 'E'))
german.credit$Account_status <- factor(german.credit$Account_status,
labels = c('A', 'C', 'B', 'D'))
tree1_CR <- rpart(Credit_risk~., data = german.credit)
plotcp(tree1_CR)
tree2_CR <- prune(tree1_CR, cp = 0.02)
tree2_CR
plot(tree2_CR)
text(tree2_CR)
rpart.plot(tree2_CR)
tree2_CR_party <- as.party(tree2_CR)
plot(tree2_CR_party)
require(vip)
vip::vi(tree2_CR)
require(faraway)
data("ozone")
help("ozone")
summary(ozone)
head(ozone, 10)
dim(ozone)
set.seed(12345)
tree1_O3 <- rpart(O3~., data = ozone)
plotcp(tree1_O3)
install.packages("rpart")
install.packages("rpart")
install.packages("pROC")
install.packages("party")
install.packages("partykit")
require(fairml)
data("german.credit")
install.packages("fairml")
### Carregando as bibliotecas necess�rias.
require(rpart)
require(rpart.plot)
require(pROC)
require(party)
require(partykit)
require(fairml)
data("german.credit")
summary(german.credit)
head(german.credit, 10)
dim(german.credit)
### Defini��o de novos labels para as vari�veis para melhorar a visualiza��o dos resultados
german.credit$Savings_bonds <- factor(german.credit$Savings_bonds,
labels = c('A', 'D', 'B', 'C', 'E'))
german.credit$Credit_history <- factor(german.credit$Credit_history,
labels = c('A', 'B', 'C', 'D', 'E'))
german.credit$Account_status <- factor(german.credit$Account_status,
labels = c('A', 'C', 'B', 'D'))
tree1_CR <- rpart(Credit_risk~., data = german.credit)
plotcp(tree1_CR)
tree2_CR <- prune(tree1_CR, cp = 0.02)
tree2_CR
plot(tree2_CR)
text(tree2_CR)
rpart.plot(tree2_CR)
require(rpart.plot)
install.packages("rpart.plot")
require(rpart.plot)
### Carregando as bibliotecas necess�rias.
require(rpart)
require(rpart.plot)
require(pROC)
require(party)
require(partykit)
require(fairml)
data("german.credit")
summary(german.credit)
head(german.credit, 10)
dim(german.credit)
### Defini��o de novos labels para as vari�veis para melhorar a visualiza��o dos resultados
german.credit$Savings_bonds <- factor(german.credit$Savings_bonds,
labels = c('A', 'D', 'B', 'C', 'E'))
german.credit$Credit_history <- factor(german.credit$Credit_history,
labels = c('A', 'B', 'C', 'D', 'E'))
german.credit$Account_status <- factor(german.credit$Account_status,
labels = c('A', 'C', 'B', 'D'))
tree1_CR <- rpart(Credit_risk~., data = german.credit)
plotcp(tree1_CR)
tree2_CR <- prune(tree1_CR, cp = 0.02)
tree2_CR
plot(tree2_CR)
text(tree2_CR)
rpart.plot(tree2_CR)
tree2_CR_party <- as.party(tree2_CR)
plot(tree2_CR_party)
require(vip)
install.packages("vip")
require(vip)
vip::vi(tree2_CR)
require(faraway)
install.packages("faraway")
require(faraway)
data("ozone")
help("ozone")
summary(ozone)
head(ozone, 10)
dim(ozone)
set.seed(12345)
tree1_O3 <- rpart(O3~., data = ozone)
plotcp(tree1_O3)
tree2_O3 <- prune(tree1_O3, cp = 0.03)
tree2_O3
plot(tree2_O3)
text(tree2_O3)
rpart.plot(tree2_O3)
tree2_O3_party <- as.party(tree2_O3)
plot(tree2_O3_party)
vip::vi(tree2_O3)
require(TH.data)
require(survival)
require(ggplot2)
require(survminer)
install.packages("survminer")
install.packages("jpeg")
data("GBSG2")
help("GBSG2")
head(GBSG2, 10)
dim(GBSG2)
### Curva de sobrevida (Kaplan-Meier) para a amostra
surv <- survfit(Surv(time, cens) ~ 1, data = GBSG2)
plot(surv, las = 1, xlab = 'Tempo (dias)', ylab = 'Sobreviv�ncia')
### Conditional inferential tree
tree_BC <- ctree(Surv(time, cens) ~ ., data = GBSG2)
plot(tree_BC)
nos_finais <- factor(paste0('N� ', predict(tree_BC, type = 'node')))
surv_BC <- survfit(Surv(time, cens) ~ nos_finais, data = GBSG2)
surv_BC
ggsurvplot(surv_BC, data = GBSG2, conf.int = TRUE, risk.table = TRUE)
ggsurvplot(surv_BC, data = GBSG2, conf.int = TRUE, risk.table = TRUE)
require(kernlab)
require(randomForest)
require(performance)
require(ROCR)
require(caret)
data("spam")
help("spam")
mean(c(14.4,  12.9, 15.0, 13.7, 13.5))
sd(c(14.4,  12.9, 15.0, 13.7, 13.5))
13.9-12
1.9/(0.8155/sqrt(5))
1.9/(0.82/sqrt(5))
set.seed(1)
valores <- round(rnorm(10, 13, 0.82), 1)
set.seed(1)
valores <- round(rnorm(10, 13, 0.82), 1)
df <- t(data.frame(v = valores[1:5],
v = valores[6:10]))
row.names(df) <- c('','')
knitr::kable(df)
mean(valores)
sd(valores)
13.11-12
1.11/(0.65/sqrt(10))
round(1.11/(0.65/sqrt(10)))
round(1.11/(0.65/sqrt(10)),2)
(91.5-126.3)/sqrt((100/10)+((12^2)/10))
round((91.5-126.3)/sqrt((100/10)+((12^2)/10)))
round((91.5-126.3)/sqrt((100/10)+((12^2)/10)),2)
tabela <- data.frame(face = 1:6,
n = c(56,63,48,49,61,55))
knitr::kable(tabela)
knitr::kable(t(tabela))
332/6
cc <- curve(dchisq(x, df = 5),
from = 0, to = 5, n = 100,
lwd = 3,
xlab = "chi^2",
ylab = "Densidade",
frame = F)
area_poly(cc, cutoff =  11.07, side = 1, col = "red", density = 100)
points(x = 3.35, y = 0, pch = 19, cex = 2, col = 'blue')
cc <- curve(dchisq(x, df = 5),
from = 0, to = 12, n = 100,
lwd = 3,
xlab = "chi^2",
ylab = "Densidade",
frame = F)
area_poly(cc, cutoff = 11.07, side = 1, col = "red", density = 100)
332/6
pt(2.12, 20)
1-pt(2.12, 20)
set.seed(1)
v1 = rnorm(10, 20, 5)
v2 = rnorm(10, 20, 5 )
x = v1*2
x
rnorm(10,5000,2000)
round(rnorm(10,5000,2000))
sort(round(rnorm(10,5000,2000)))
sort(round(rnorm(10,5000,4000)))
sort(round(rnorm(10,5000,3000)))
sort(round(rnorm(10,5000,3000)))
sort(round(rnorm(10,10,5)))
sort(round(rnorm(10,10,2)))
sort(round(rnorm(10,10,1)))
sort(round(rnorm(10,10,1.5)))
sort(round(rnorm(10,10,2)))
sort(round(rnorm(10,10,2)))
sort(round(rnorm(10,10,3)))
sample(9:15, 10, replace = T)
sort(sample(9:15, 10, replace = T))
km = c(1239, 2198, 2870, 3231, 3670, 5003, 5223, 5874, 6427, 6832)
consumo = c(9, 9, 9, 11, 11, 13, 13, 14, 15, 15)
plot(consumo~km)
plot(consumo~km)
plot(consumo~km)
plot(consumo~km)
km = c(1239, 2198, 2870, 3231, 3670, 5003, 5223, 5874, 6427, 6832)
consumo = c(9, 9, 10, 11, 11, 13, 13, 14, 15, 15)
plot(consumo~km)
km = c(1239, 2198, 2870, 3231, 3670, 5003, 5223, 5874, 6427, 6832)
consumo = c(8, 9, 10, 11, 11, 13, 13, 14, 15, 15)
plot(consumo~km)
km = c(1239, 2198, 2870, 3231, 3670, 5003, 5223, 5874, 6427, 6832)
consumo = c(8, 9, 10, 11, 11, 13, 13, 14, 15, 15)
km = c(1239, 2198, 2870, 3231, 3670, 5003, 5223, 5874, 6427, 6832)
consumo = c(8, 9, 10, 11, 11, 13, 13, 14, 15, 15)
tabela <- data.frame(km, consumo)
knitr::kable(t(tabela))
mean(km)
mean(consumo)
cov(km, consumo)
var(km)
var(consumo)
cov(km, consumo)/sqrt(var(km)*var(consumo))
cor(km, consumo)
round(cor(km, consumo), 2)
round(cor(km, consumo), 3)
round(cor(km, consumo), 4)
(0.9959^2*(sqrt(8)))/sqrt(1-(0.9959^2))
cor.test(km, consumo)
atanh(1)
atanh(0.54)
(atanh(0.54) - atanh(0.4))*sqrt(28-3)
round((atanh(0.54) - atanh(0.4))*sqrt(28-3))
round((atanh(0.54) - atanh(0.4))*sqrt(28-3), 4)
